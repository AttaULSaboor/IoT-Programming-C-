// Water Montitoring and Control
//
// This program controls a water pump system with fault detection. It uses sensors to monitor water level and pump temperature, 
// controls a pump via a relay, and communicates with an MQTT broker.
//
// @author Atta UL Saboor
//

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "wifi.h"  // WiFi credentials

// Define the GPIO pins for the sensors and actuators
#define WATER_LEVEL_SENSOR A0
#define HIGH_WATER_SENSOR D7 // push button switch
#define EMERGENCY_STOP_BUTTON D6 // push button switch
#define PUMP_CONTROL_LED D2 // Green LED
#define FAULT_INDICATOR_LED D5 // Red LED
#define TEMP_SENSOR D3 // DS18B20 Temp. Sensor

// Define the threshold values
const int WATER_LEVEL_LOW_THRESHOLD = 10; // 10%
const int WATER_LEVEL_HIGH_THRESHOLD = 90; // 90%
const float TEMP_HIGH_THRESHOLD = 32.0; // 32Â°C

// MQTT Broker settings
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;

// Global variables
WiFiClient espClient;
PubSubClient client(espClient);

// Flags for fault conditions
volatile bool highWaterLevelFlag = false;
volatile bool emergencyStopFlag = false;
volatile bool highTemperatureFlag = false;
volatile bool remoteStopFlag = false;

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(TEMP_SENSOR);

// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);

// Declarations of functions
void setupNetwork();
void mqtt_callback(char* topic, byte* payload, unsigned int length);
void highWaterInterrupt();
void emergencyStopInterrupt();
void reconnect();
float readTemperature();
void publishSensorData(int waterLevel, float temperature);
void checkFaultConditions(float temperature);
void controlPump(int waterLevel);

// ***********************************************************
void setup() {
  pinMode(WATER_LEVEL_SENSOR, INPUT);
  pinMode(HIGH_WATER_SENSOR, INPUT_PULLUP);
  pinMode(EMERGENCY_STOP_BUTTON, INPUT_PULLUP);
  pinMode(PUMP_CONTROL_LED, OUTPUT);
  pinMode(FAULT_INDICATOR_LED, OUTPUT);
  
  // Initialize serial communication
  Serial.begin(115200);
  
  // Connect to WiFi
  setupNetwork();
  
  // Set up MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(mqtt_callback);

  // Set up interrupts for the emergency stop and high water level buttons
  attachInterrupt(digitalPinToInterrupt(HIGH_WATER_SENSOR), highWaterInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(EMERGENCY_STOP_BUTTON), emergencyStopInterrupt, FALLING);

  randomSeed(micros());
}

// ***********************************************************
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Read the water level sensor
  int waterLevelPercent = analogRead(WATER_LEVEL_SENSOR) / 10.23; // Convert to percentage
  
  // Read the temperature sensor
  float tempCelsius = readTemperature(); 
  
  // Publish sensor data to MQTT
  publishSensorData(waterLevelPercent, tempCelsius);
  
  // Check and handle fault conditions
  checkFaultConditions(tempCelsius);
  
  // Control the pump based on the water level and fault conditions
  controlPump(waterLevelPercent);
  
  // A delay to prevent flooding MQTT with messages 
  delay(5000);

  // Handle the fault conditions immediately
  if (emergencyStopFlag || highWaterLevelFlag) {
    digitalWrite(FAULT_INDICATOR_LED, HIGH);
    digitalWrite(PUMP_CONTROL_LED, LOW);
    // Clear the MQTT remote_stop flag since we're handling a local stop
    remoteStopFlag = false;
  }
}

// ***********************************************************
// Connects to the WiFi network.
// ***********************************************************
void setupNetwork() {
  Serial.print("\nConnecting to WiFi...");
  
  // Start connecting to WiFi
  WiFi.begin(ssid, password);

  // Wait until the connection has been confirmed before continuing
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) { // Try to connect for 20*500ms = 10 seconds
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if(WiFi.status() != WL_CONNECTED) {
    Serial.println("Failed to connect to WiFi. Please check your credentials");
    return;
  }

  Serial.println("");
  Serial.print("WiFi connected with IP address: ");
  Serial.println(WiFi.localIP());
}

// ***********************************************************
// Callback function for handling incoming MQTT messages.
//
// @param topic The topic of the message.
// @param payload The payload of the message.
// @param length The length of the payload.
// ***********************************************************
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
  // Convert payload to string
  Serial.print("MQTT message received on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  for (unsigned int i = 0; i < length; i++) {
      messageTemp += (char)payload[i];
  }
  Serial.println(messageTemp);
  // Handle message
  if (String(topic) == "saboorremotestop/remote_stop") {
    if(messageTemp == "1") {
      remoteStopFlag = true;
    } else if (messageTemp == "0") {
      remoteStopFlag = false;
    }
  }
}

// *********************************************************************
// Attempts to reconnect to the MQTT broker when the connection is lost.
// *********************************************************************
void reconnect() {
  
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect with a unique client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("connected to MQTT broker");
      client.subscribe("saboorremotestop/remote_stop");

      // Publish "0" to remotestop topic upon startup
      client.publish("saboorremotestop/remote_stop", "0");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000); // Wait 5 seconds before retrying
    }
  }
}

// ***********************************************************
// Reads the current temperature from the temperature sensor.
//
// @returns The temperature in degrees Celsius.
// ***********************************************************
float readTemperature() {
  
  sensors.requestTemperatures(); 
  float tempC = sensors.getTempCByIndex(0);
  return tempC;
}

// ****************************************************************
// Controls the pump based on the water level and fault conditions.
//
// @param waterLevel The current water level as a percentage.
// ****************************************************************
void controlPump(int waterLevel) {
  // Turn on pump if below low threshold and no faults
  if (waterLevel < WATER_LEVEL_LOW_THRESHOLD && !highWaterLevelFlag && !highTemperatureFlag && !emergencyStopFlag && !remoteStopFlag) {
    digitalWrite(PUMP_CONTROL_LED, HIGH);
  }
  // Turn off pump if above high threshold or any fault occurs
  else if (waterLevel > WATER_LEVEL_HIGH_THRESHOLD || highWaterLevelFlag || highTemperatureFlag || emergencyStopFlag || remoteStopFlag) {
    digitalWrite(PUMP_CONTROL_LED, LOW);
  }
}

// ***************************************************************
// Checks for various fault conditions and sets flags accordingly.
//
// @param temperature The current temperature reading.
// ***************************************************************
void checkFaultConditions(float temperature) {
  // Set the highTemperatureFlag if temperature is too high
  if (temperature > TEMP_HIGH_THRESHOLD) {
    highTemperatureFlag = true;
    Serial.println("High temperature fault");
  }

  // Read the states of the high water sensor and emergency stop button
  if (digitalRead(HIGH_WATER_SENSOR) == LOW) {
    highWaterLevelFlag = true;
    Serial.println("High water level fault");
  }
  
  if (digitalRead(EMERGENCY_STOP_BUTTON) == LOW) {
    emergencyStopFlag = true;
    Serial.println("Emergency stop pressed");
  }

  if (remoteStopFlag) {
    Serial.println("Remote stop received");
  }

  // If any fault condition is active, turn on the fault indicator
  if (highWaterLevelFlag || highTemperatureFlag || emergencyStopFlag || remoteStopFlag) {
    digitalWrite(FAULT_INDICATOR_LED, HIGH);
  } else {
    digitalWrite(FAULT_INDICATOR_LED, LOW);
  }
}

// ***********************************************************
// Publishes sensor data to the MQTT broker.
//
// @param waterLevel The water level percentage.
// @param temperature The temperature in degrees Celsius.
// ***********************************************************
void publishSensorData(int waterLevel, float temperature) {
  char msg[50];
  
  // Publish water level
  snprintf(msg, 50, "%d", waterLevel);
  client.publish("saboorwaterlevel/water_level", msg);
  
  // Publish temperature
  snprintf(msg, 50, "%.2f", temperature);
  client.publish("saboortemp/temp", msg);
  
  // Publish emergency stop state
  const char* e_stop_state = emergencyStopFlag ? "Yes" : "No";
  client.publish("saboorestop/e_stop", e_stop_state);

  // Publish high water level state
  const char* high_water_state = highWaterLevelFlag ? "Yes" : "No";
  client.publish("saboorhighlevel/high_level", high_water_state);

}

// ***********************************************************
// Interrupt Service Routine for the high water level sensor.
// ***********************************************************
void ICACHE_RAM_ATTR highWaterInterrupt() {
  highWaterLevelFlag = true;
}

// ***********************************************************
// Interrupt Service Routine for the emergency stop button.
// ***********************************************************
void ICACHE_RAM_ATTR emergencyStopInterrupt() {
  emergencyStopFlag = true;
}

